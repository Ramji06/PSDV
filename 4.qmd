---
title: "Grammar of Graphics & Plotnine"
author: 
  - "Kamble Pushkar Sidharth"
  - "Kathan Vishal Shah"
  - "Ramji Purwar"
format: 
  html:
    toc: true
    toc-location: left
    toc-title: "Contents"
    toc-depth: 3
    theme:
      light: flatly
      dark: darkly
    number-sections: true
    code-fold: true
    highlight-style: github
    css: custom.css
jupyter: python3
execute: 
  echo: true
  warning: false
  message: false
Team: "J016"
---

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import *
```

# Grammar of Graphics

## What is Grammar of Graphics

::: {.callout-note}
## Key Concept
The Grammar of Graphics is a systematic approach to creating data visualizations by breaking charts into different components.
:::

The Grammar of Graphics breaks a chart into different components such as:

- **Data**: The dataset being visualized.
- **Aesthetics**: Mapping variables to visual properties.
- **Geometries**: Shapes used to represent data (points, lines, bars, etc.).
- **Facets**: Splitting data into multiple panels.
- **Statistics**: Transformations applied to data before plotting.
- **Coordinates**: The space where the plot is drawn (cartesian, polar, etc.).

![Components of Grammar of Graphics](https://miro.medium.com/v2/resize:fit:1100/format:webp/1*1McZxzoPz6JE33CHY105VQ.png)

## Why is Grammar of Graphics Important?

The Grammar of Graphics allows users to build complex plots easily by layering components instead of 
hardcoding each visualization.

Let's see that with an example:

```{python}
mpg = sns.load_dataset("mpg")
mpg.head()
```

#### Traditional Matplotlib plot

```{python}
plt.figure(figsize=(8,5))
plt.scatter(mpg['weight'], mpg['mpg'], color='blue')

plt.xlabel("Car Weight")
plt.ylabel("Miles per Gallon (MPG)")
plt.title("Car Weight vs. MPG")
plt.show()
```

#### Grammar of Graphics plot with Plotnine

```{python}
p = (
    ggplot(mpg) +
    aes(x="weight", y="mpg", color="origin") +
    geom_point() +
    labs(x="Car Weight", y="Miles per Gallon (MPG)") +
    theme_minimal()
)

p.draw()
p.show()
```

::: {.callout-tip}
## Observation
The Grammar of Graphics approach allows us to easily add additional information (car origin) to our plot without significantly changing the code structure.
:::


# Plotnine: A Python Implementation of Grammar of Graphics

Plotnine is a Python library based on the Grammar of Graphics, providing a structured and systematic way to create data visualizations.

## Key Features

1. **Grammar of Graphics Approach**
2. **Simple and Concise Syntax**
3. **Multiple Geometries**
4. **Statistical Transformations**
5. **Faceting (Subplots)**
6. **Themes for Customization**
7. **Supports Custom Labels & Titles**
8. **Works with Pandas & DataFrames**
9. **Exporting & Saving Plots**

## Creating Plots with Plotnine

### How to Install plotnine?

```sh
pip install plotnine
```

### Import and Version check

```sh
import plotnine
print("Plotnine version:", plotnine.version)
```
### Basic Scatter Plot

```{python}
df = pd.DataFrame({
    'x': range(10),
    'y': [4, 5, 9, 1, 7, 3, 2, 2, 8, 9]
})

p = (
    ggplot(df) +
    aes(x='x', y='y') +
    geom_point()
)

p.draw()
p.show()
```

### Basic Histogram

```{python}
df_hist = pd.DataFrame({'data': np.random.randn(1000)})

p = (
    ggplot(df_hist) +
    aes(x='data') +
    geom_histogram(binwidth=0.5, fill='lightblue', color='black')
)

p.draw()
p.show()
```


### Simple Line plot

```{python}
x = np.arange(1, 11)
y = [i*i for i in x]

df = pd.DataFrame({
'x': x,
'y': y
})

p = (
    ggplot(df, aes(x='x', y='y')) +
    geom_line(color='blue') +
    labs(title="Line Plot Example", x="X-Axis", y="Y-Axis")
)

p.draw()
p.show()
```


### Simple Bar Plot


```{python}
df_bar = pd.DataFrame({
  'vegetable': ['Potata', 'Carrot', 'Peas', 'Tomata'], 
  'price': [40, 25, 20, 60]}
)

p = (
  ggplot(df_bar) +
  aes(x='vegetable', y='price') +
  geom_bar(stat='identity', fill='skyblue')
)

p.draw()
p.show()
```

# Demonstration of Plotnine Key Features

In this section, we'll demonstrate each of the key features of Plotnine, showing how they contribute to creating powerful and flexible visualizations using the Grammar of Graphics approach.

## Grammar of Graphics Approach

The Grammar of Graphics approach allows us to build plots layer by layer. Let's start with a basic scatter plot and then add layers to it.

```{python}
df = pd.DataFrame({
    'x': range(10),
    'y': np.random.randint(1, 11, 10)
})

p = (
    ggplot(df) +
    aes(x='x', y='y') +
    geom_point()
)

p.draw()
p.show()
```


## Simple and Concise Syntax

Notice how we can easily add layers to our plot using the `+` operator. This makes the syntax simple and intuitive.

```sh
# Adding color and labels

(ggplot(df, aes(x='x', y='y', color='category'))
geom_point()
labs(title="Scatter Plot with Color", x="X-axis", y="Y-axis")).draw()
```


## Multiple Geometries

Plotnine supports various geometries. Let's combine points and lines in one plot.

```{python}
np.random.seed(42)
df = pd.DataFrame({
    'x': np.random.normal(0, 1, 100),
    'y': np.random.normal(0, 1, 100),
    'category': np.random.choice(['A', 'B', 'C'], 100)
})

p = (ggplot(df, aes(x='x', y='y', color='category'))
     + geom_point()
     + geom_smooth(method='lm', se=False)
     + labs(title="Scatter Plot with Trend Lines",
            x="X-axis",
            y="Y-axis",
            color="Category")
     + theme_minimal()
)

p.draw()
p.show()
```


## Statistical Transformations

Plotnine can perform statistical transformations on the fly. Here's an example using a histogram with density estimation.


```{python}
from plotnine import *
import pandas as pd

x = range(1, 11)
y = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
df = pd.DataFrame({
    'x': x, 
    'y': y
})

p = (
    ggplot(df, aes(x='x', y='y')) +
    geom_point() +
    geom_smooth(method='lm')
) 

p.draw()
p.show()
```

## Faceting (Subplots)

Faceting allows us to create subplots based on categorical variables.

```{python}
df = pd.DataFrame({
    'x': np.arange(1, 11),
    'y': np.random.randint(1, 26, 10), 
    'category': ['A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C'] 
})

p = (
    ggplot(df, aes(x='x', y='y')) +
    geom_point() +
    facet_wrap("~category")
)

p.draw()
p.show()
```


## Themes for Customization

Plotnine offers various themes for customizing the look of your plots.

```{python}
from plotnine.themes import theme_minimal

p = (
    ggplot(df, aes(x='x', y='y')) +
    geom_point() +
    theme_minimal()
)
 
p.draw()
p.show()
```

## Supports Custom Labels & Titles

We can easily customize labels and titles for our plots.

```sh
ggplot(df, aes(x='x', y='y')) + 
geom_point() + 
labs(title = "Scatter Plot", x = "X-Axis", y = "Y-Axis")
```


## Works with Pandas & DataFrames

As you've seen in all examples, Plotnine works seamlessly with Pandas DataFrames.

## Exporting & Saving Plots

Plotnine allows you to save plots easily. Here's how you can save a plot:

```sh
p = ggplot(df, aes(x='x', y='y')) + geom_point()
p.save("plot.png")
```

This demonstration showcases the power and flexibility of Plotnine in implementing the Grammar of Graphics. Each feature contributes to making data visualization more intuitive, customizable, and powerful in Python.


# Conclusion

Plotnine brings the Grammar of Graphics to Python, offering a clear and flexible way to create data visualizations. It breaks down plots into components like data, aesthetics, and geometries, allowing users to build visualizations layer by layer.

With seamless integration into Pandas and support for statistical transformations, Plotnine is a valuable tool for data scientists. From simple scatter plots to complex faceted charts, it enables customization and clarity in data presentation.

As data visualization remains key to analysis and communication, Plotnine helps create clear, reproducible, and visually appealing charts with ease.

## Useful Resources

- [**Plotnine Official Documentation**](https://plotnine.org)
- [**The Grammar of Graphics - Leland Wilkinson**](https://www.springer.com/gp/book/9780387245447)
